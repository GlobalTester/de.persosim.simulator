package de.persosim.simulator.perso;

import static de.persosim.simulator.utils.PersoSimLogger.TRACE;
import static de.persosim.simulator.utils.PersoSimLogger.log;

import java.util.Collections;
import java.util.HashSet;

import de.persosim.simulator.cardobjects.ElementaryFile;
import de.persosim.simulator.cardobjects.FileIdentifier;
import de.persosim.simulator.cardobjects.ShortFileIdentifier;
import de.persosim.simulator.cardobjects.TrustPointCardObject;
import de.persosim.simulator.cardobjects.TrustPointIdentifier;
import de.persosim.simulator.crypto.certificates.CardVerifiableCertificate;
import de.persosim.simulator.exception.CertificateNotParseableException;
import de.persosim.simulator.protocols.TR03110;
import de.persosim.simulator.protocols.ta.TerminalType;
import de.persosim.simulator.secstatus.SecCondition;
import de.persosim.simulator.tlv.ConstructedTlvDataObject;
import de.persosim.simulator.tlv.TlvDataObject;
import de.persosim.simulator.tlv.TlvDataObjectContainer;
import de.persosim.simulator.utils.HexString;

/**
 * Standard personalization with same defaults used within the test PKI but with
 * trustpoints based on keys provided.
 * <p/>
 * This personalization is intended to be as close to the currently available
 * nPA as possible. During development the closest already supported
 * configuration is used.
 * 
 * @author amay
 * 
 */
public class DefaultPersoGt extends DefaultPersonalization {

	@Override
	protected void addTaTrustPoints() throws CertificateNotParseableException {
		// certificates
		byte[] cvcaIsData = HexString
				.toByteArray
		byte[] cvcaAtData = HexString
				.toByteArray
		byte[] cvcaStData = HexString
				.toByteArray("7F218201B07F4E8201685F290100420D444553544356434130303030317F4982011D060A04007F000702020202038120A9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E537782207D5A0975FC2C3057EEF67530417AFFE7FB8055C126DC5C6CE94A4B44F330B5D9832026DC5C6CE94A4B44F330B5D9BBD77CBF958416295CF7E1CE6BCCDC18FF8C07B68441048BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F0469978520A9FB57DBA1EEA9BC3E660A909D838D718C397AA3B561A6F7901E0E82974856A786410405AB6A1DDF4C611C1BB363A0BBC0E307EC1C03EA90CF4B7A51DC6798119D75173670D740FABA4E497EBBB01A20EA14D5A423FE7A43FB954A4A0173F2380364788701015F200D444553544356434130303030317F4C0E060904007F0007030102035301C35F25060104000500055F24060105000500055F37408C7551945DCF5B1BD8588859EACA6710B1CB690CEB28C3169F03B6CA76C75CF5A7FEA6DD16A60FCEFD1EB29A91C4471D6DC4161ECBFAE7ED4D1447C286A77F70");

		TlvDataObject cvcaIsTlv = ((ConstructedTlvDataObject) new TlvDataObjectContainer(
				cvcaIsData).getTagField(TR03110.TAG_7F21))
				.getTagField(TR03110.TAG_7F4E);
		TlvDataObject cvcaAtTlv = ((ConstructedTlvDataObject) new TlvDataObjectContainer(
				cvcaAtData).getTagField(TR03110.TAG_7F21))
				.getTagField(TR03110.TAG_7F4E);
		TlvDataObject cvcaStTlv = ((ConstructedTlvDataObject) new TlvDataObjectContainer(
				cvcaStData).getTagField(TR03110.TAG_7F21))
				.getTagField(TR03110.TAG_7F4E);

		// TA trustpoints
		TrustPointCardObject trustPointIs = new TrustPointCardObject(
				new TrustPointIdentifier(TerminalType.IS),
				new CardVerifiableCertificate(
						(ConstructedTlvDataObject) cvcaIsTlv));
		mf.addChild(trustPointIs);

		TrustPointCardObject trustPointAt = new TrustPointCardObject(
				new TrustPointIdentifier(TerminalType.AT),
				new CardVerifiableCertificate(
						(ConstructedTlvDataObject) cvcaAtTlv));
		mf.addChild(trustPointAt);

		TrustPointCardObject trustPointSt = new TrustPointCardObject(
				new TrustPointIdentifier(TerminalType.ST),
				new CardVerifiableCertificate(
						(ConstructedTlvDataObject) cvcaStTlv));
		mf.addChild(trustPointSt);
	}

	@Override
	protected void addEfChipSecurity(HashSet<SecCondition> taForChipSecuritySet) {
		// EF.ChipSecurity
		byte[] efChipSecurityContentPlain = HexString
				.toByteArray

		TlvDataObjectContainer efChipSecurityContent = new TlvDataObjectContainer(
				efChipSecurityContentPlain);
		log(getClass(),
				"EF.ChipSecurity of length "
						+ efChipSecurityContent.getLength() + " is "
						+ efChipSecurityContent, TRACE);
		ElementaryFile efChipSecurity = new ElementaryFile(new FileIdentifier(
				0x011B), new ShortFileIdentifier(0x1B),
				efChipSecurityContent.toByteArray(), taForChipSecuritySet,
				Collections.<SecCondition> emptySet(),
				Collections.<SecCondition> emptySet());
		mf.addChild(efChipSecurity);
	}

	@Override
	protected void addEfCardSecurity(HashSet<SecCondition> taSet) {
		// EF.CardSecurity
		byte[] efCardSecurityContentPlain = HexString
				.toByteArray("30 82 05 59 06 09 2A 86 48 86 F7 0D 01 07 02 A0 82 05 4A 30 82 05 46 02 01 03 31 0F 30 0D 06 09 60 86 48 01 65 03 04 02 01 05 00 30 82 01 44 06 08 04 00 7F 00 07 03 02 01 A0 82 01 36 04 82 01 32 31 82 01 2E 30 0D 06 08 04 00 7F 00 07 02 02 02 02 01 02 30 0F 06 0A 04 00 7F 00 07 02 02 03 02 02 02 01 02 30 12 06 0A 04 00 7F 00 07 02 02 04 02 02 02 01 02 02 01 0D 30 19 06 09 04 00 7F 00 07 02 02 03 02 30 0C 06 07 04 00 7F 00 07 01 02 02 01 0D 30 2F 06 08 04 00 7F 00 07 02 02 06 16 23 68 74 74 70 73 3A 2F 2F 77 77 77 2E 68 6A 70 2D 63 6F 6E 73 75 6C 74 69 6E 67 2E 63 6F 6D 2F 68 6F 6D 65 30 17 06 0A 04 00 7F 00 07 02 02 05 02 03 30 09 02 01 01 02 01 01 01 01 00 30 17 06 0A 04 00 7F 00 07 02 02 05 02 03 30 09 02 01 01 02 01 02 01 01 FF 30 19 06 09 04 00 7F 00 07 02 02 05 02 30 0C 06 07 04 00 7F 00 07 01 02 02 01 0D 30 5F 06 09 04 00 7F 00 07 02 02 01 02 30 52 30 0C 06 07 04 00 7F 00 07 01 02 02 01 0D 03 42 00 04 A4 4E BE 54 51 DF 7A AD B0 1E 45 9B 8C 92 8A 87 74 6A 57 92 7C 8C 28 A6 77 5C 97 A7 E1 FE 8D 9A 46 FF 4A 1C C7 E4 D1 38 9A EA 19 75 8E 4F 75 C2 8C 59 8F D7 34 AE BE B1 35 33 7C F9 5B E1 2E 94 A0 82 02 CC 30 82 02 C8 30 82 02 6F A0 03 02 01 02 02 06 01 45 C9 66 61 27 30 0A 06 08 2A 86 48 CE 3D 04 03 02 30 53 31 0B 30 09 06 03 55 04 06 13 02 44 45 31 17 30 15 06 03 55 04 0A 0C 0E 48 4A 50 20 43 6F 6E 73 75 6C 74 69 6E 67 31 17 30 15 06 03 55 04 0B 0C 0E 43 6F 75 6E 74 72 79 20 53 69 67 6E 65 72 31 12 30 10 06 03 55 04 03 0C 09 48 4A 50 20 50 42 20 43 53 30 1E 17 0D 31 34 30 35 30 34 32 32 34 31 34 31 5A 17 0D 31 35 30 34 32 39 32 32 34 31 34 31 5A 30 54 31 0B 30 09 06 03 55 04 06 13 02 44 45 31 17 30 15 06 03 55 04 0A 0C 0E 48 4A 50 20 43 6F 6E 73 75 6C 74 69 6E 67 31 18 30 16 06 03 55 04 0B 0C 0F 44 6F 63 75 6D 65 6E 74 20 53 69 67 6E 65 72 31 12 30 10 06 03 55 04 03 0C 09 48 4A 50 20 50 42 20 44 53 30 82 01 33 30 81 EC 06 07 2A 86 48 CE 3D 02 01 30 81 E0 02 01 01 30 2C 06 07 2A 86 48 CE 3D 01 01 02 21 00 A9 FB 57 DB A1 EE A9 BC 3E 66 0A 90 9D 83 8D 72 6E 3B F6 23 D5 26 20 28 20 13 48 1D 1F 6E 53 77 30 44 04 20 7D 5A 09 75 FC 2C 30 57 EE F6 75 30 41 7A FF E7 FB 80 55 C1 26 DC 5C 6C E9 4A 4B 44 F3 30 B5 D9 04 20 26 DC 5C 6C E9 4A 4B 44 F3 30 B5 D9 BB D7 7C BF 95 84 16 29 5C F7 E1 CE 6B CC DC 18 FF 8C 07 B6 04 41 04 8B D2 AE B9 CB 7E 57 CB 2C 4B 48 2F FC 81 B7 AF B9 DE 27 E1 E3 BD 23 C2 3A 44 53 BD 9A CE 32 62 54 7E F8 35 C3 DA C4 FD 97 F8 46 1A 14 61 1D C9 C2 77 45 13 2D ED 8E 54 5C 1D 54 C7 2F 04 69 97 02 21 00 A9 FB 57 DB A1 EE A9 BC 3E 66 0A 90 9D 83 8D 71 8C 39 7A A3 B5 61 A6 F7 90 1E 0E 82 97 48 56 A7 02 01 01 03 42 00 04 85 06 CE 37 26 60 47 19 D7 55 BF 58 CF 7E F7 BD AB B5 C1 B4 EC DD 47 66 48 0F 76 53 2D 54 A5 2C 85 56 B5 6C 32 D9 91 6D EE 1C 8D 12 3E 76 FB 15 91 94 9B 69 E1 54 1A 1D 4A 4A 7C C4 C1 E0 AD DD A3 52 30 50 30 1F 06 03 55 1D 23 04 18 30 16 80 14 30 EE 98 DE F4 27 9E AB 94 E8 90 CB 0F ED 54 37 5B 89 8D CC 30 1D 06 03 55 1D 0E 04 16 04 14 27 AD F1 63 0C 61 3B 0B 62 28 96 6E 9D E3 E9 49 35 7A A6 16 30 0E 06 03 55 1D 0F 01 01 FF 04 04 03 02 07 80 30 0A 06 08 2A 86 48 CE 3D 04 03 02 03 47 00 30 44 02 20 10 E8 EF 92 D3 B0 5F A7 5E CF D3 83 EE 64 FE 95 AF 9F AA 62 1B 19 BB 01 04 E2 E8 43 28 93 1B C4 02 20 7C 21 46 87 3C 5F C1 7F 73 BD A9 90 DF 25 32 BF FA 22 60 3C 83 86 E6 18 2E 56 3C 1E CD 37 33 D5 31 82 01 16 30 82 01 12 02 01 01 30 5D 30 53 31 0B 30 09 06 03 55 04 06 13 02 44 45 31 17 30 15 06 03 55 04 0A 0C 0E 48 4A 50 20 43 6F 6E 73 75 6C 74 69 6E 67 31 17 30 15 06 03 55 04 0B 0C 0E 43 6F 75 6E 74 72 79 20 53 69 67 6E 65 72 31 12 30 10 06 03 55 04 03 0C 09 48 4A 50 20 50 42 20 43 53 02 06 01 45 C9 66 61 27 30 0D 06 09 60 86 48 01 65 03 04 02 01 05 00 A0 4A 30 17 06 09 2A 86 48 86 F7 0D 01 09 03 31 0A 06 08 04 00 7F 00 07 03 02 01 30 2F 06 09 2A 86 48 86 F7 0D 01 09 04 31 22 04 20 29 2D A3 44 46 FB 05 32 E0 1D 51 CC 37 31 88 19 D9 DD EA AD 0D 49 6A D4 34 D0 11 88 DD 2E 9D 73 30 0A 06 08 2A 86 48 CE 3D 04 03 02 04 47 30 45 02 21 00 9A C3 ED C4 FC 4B FB 2D FF F6 E3 B3 56 5B E8 01 8D 93 8B FA 83 AB F6 5D 94 29 02 8C 2F 44 7D 34 02 20 1E 30 F4 73 6E 36 2B 55 91 CA 53 2F 6D FF 82 77 9A 8A 22 A4 BE B1 0F 54 B8 23 A4 D5 C1 57 A2 42");

		TlvDataObjectContainer efCardSecurityContent = new TlvDataObjectContainer(
				efCardSecurityContentPlain);
		log(getClass(),
				"EF.CardSecurity of length "
						+ efCardSecurityContent.getLength() + " is "
						+ efCardSecurityContent, TRACE);
		ElementaryFile efCardSecurity = new ElementaryFile(new FileIdentifier(
				0x011D), new ShortFileIdentifier(0x1D),
				efCardSecurityContent.toByteArray(), taSet,
				Collections.<SecCondition> emptySet(),
				Collections.<SecCondition> emptySet());
		mf.addChild(efCardSecurity);
	}

	@Override
	protected void addEfCardAccess(HashSet<SecCondition> unprotectedSet) {
		// EF.CardAccess
		byte[] efCardAccessContentPlain = HexString
				.toByteArray("31 81 80 30 0D 06 08 04 00 7F 00 07 02 02 02 02 01 02 30 0F 06 0A 04 00 7F 00 07 02 02 03 02 02 02 01 02 30 12 06 0A 04 00 7F 00 07 02 02 04 02 02 02 01 02 02 01 0D 30 19 06 09 04 00 7F 00 07 02 02 03 02 30 0C 06 07 04 00 7F 00 07 01 02 02 01 0D 30 2F 06 08 04 00 7F 00 07 02 02 06 16 23 68 74 74 70 73 3A 2F 2F 77 77 77 2E 68 6A 70 2D 63 6F 6E 73 75 6C 74 69 6E 67 2E 63 6F 6D 2F 68 6F 6D 65");
		TlvDataObjectContainer efCardAccessContent = new TlvDataObjectContainer(
				efCardAccessContentPlain);
		log(getClass(),
				"EF.CardAccess of length " + efCardAccessContent.getLength()
						+ " is " + efCardAccessContent, TRACE);
		ElementaryFile efCardAccess = new ElementaryFile(new FileIdentifier(
				0x011C), new ShortFileIdentifier(0x1C),
				efCardAccessContent.toByteArray(), unprotectedSet,
				Collections.<SecCondition> emptySet(),
				Collections.<SecCondition> emptySet());
		mf.addChild(efCardAccess);
	}
}
